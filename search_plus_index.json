{"./":{"url":"./","title":"Einführung","keywords":"","body":"Codex Informatica Zauberbuch, Rezepte, Alchemie & verborgenes Wissen Dies ist das Buch der längst vergessenen, gefährlichen, arkanen und schwarzmagischen Weisheit von Dev und Ops. Gebrauche es weise und nutze nur es zum Gutem. "},"auto-magic.html":{"url":"auto-magic.html","title":"Auto-Magic","keywords":"","body":"Auto-Magic "},"git-travis-ci.html":{"url":"git-travis-ci.html","title":"CI | Travis CI","keywords":"","body":"CI | Travis CI "},"git-travis-ci/git-publish-to-githubpages.html":{"url":"git-travis-ci/git-publish-to-githubpages.html","title":"CI | Publish to Github Pages","keywords":"","body":"CI | Publish to Github Pages Links https://github.com/serde-rs/serde-rs.github.io/issues/7 https://stackoverflow.com/questions/23277391/how-to-publish-to-github-pages-from-travis-ci https://travis-ci.org///settings https://takuti.me/note/travis-gh-pages-deployment/ https://devhints.io/travis-gh-pages https://djw8605.github.io/2017/02/08/deploying-docs-on-github-with-travisci/ https://takuti.me/note/travis-gh-pages-deployment/ https://github.com/billryan/algorithm-exercise/blob/master/.travis.yml https://github.com/steveklabnik/automatically_update_github_pages_with_travis_example "},"saltstack.html":{"url":"saltstack.html","title":"SaltStack","keywords":"","body":"Some \"HowTos\" and \"NiceToKnows\" about SaltStack "},"saltstack/creating-hashed-passwords.html":{"url":"saltstack/creating-hashed-passwords.html","title":"SALT | Creating hashed passwords","keywords":"","body":"SALT | Creating hashed passwords salt '*' shadow.gen_password 'I_am_password' salt '*' shadow.gen_password 'I_am_password' crypt_salt='I_am_salt' algorithm=sha256 https://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.shadow.html "},"saltstack/salt-cheatsheet.html":{"url":"saltstack/salt-cheatsheet.html","title":"SALT | Cheatsheet","keywords":"","body":"SALT | Cheatsheet Daily Sysadmin Stuff salt 'minion-x-*' system.reboot # reboot minions that match minion-x-* salt '*' status.uptime # Get the uptime of all our minions salt -v -G owner:theo pkg.list_upgrades # List available package updates for Theo's minions salt 'web*' pkg.install dstat # Install a package on matching Salt Minions salt '*' ps.grep apache # Check if a specific application/process is running salt 'web*' cp.push /var/log/dpkg.log # Gather/collect/pull files from Salt minions and upload them to the master salt '*' file.contains /etc/hosts.allow 'yber' # Check if a file on the Salt minions contains a certain string salt-cp '*' some_script.py /target-dir/some_script.py # Push or upload or copy a file from the Salt master to the Salt minions Other Awesome Commands salt '*' cmd.run 'uname -a' # Show running kernel and OS info on all minions salt '*' cmd.run 'df -h' # Show Diskspace info on all minions Packages salt '*' pkg.list_upgrades # get a list of packages that need to be upgrade salt '*' pkg.refresh_db # refreshes package db (apt-get update) salt '*' pkg.upgrade # Upgrades all packages via apt-get dist-upgrade (or similar) salt '*' pkg.version bash # get current version of the bash package salt '*' pkg.install bash # install or upgrade bash package salt '*' pkg.install bash refresh=True # install or upgrade bash package but # refresh the package database before installing. System Services salt '*' service.status salt '*' service.start salt '*' service.restart salt '*' service.stop Network salt 'minion1' network.ping # Ping a host from your minion salt 'minion1' network.traceroute # Traceroute a host from your minion salt 'minion1' network.get_hostname # Get hostname salt 'minion1' network.mod_hostname # Modify hostname States salt-run state.highstate # runs all states targetted for a minion, on a minion salt 'ns*' state.highstate # runs all states targetted for a minion, from master salt 'web*' state.sls settings.nginx # runs settings/nginx/init.sls on web* Jobs salt saltutil.running # aktive Jobs finden, die auflaufen salt saltutil.kill_job # Job mitaufabbrechen Pillars salt '' pillar.ls # Pillars auflisten, die fürgültig sind salt '' pillar.items # Inhalt der Pillars anzeigen, die fürgültig sind Weblinks https://cheatsheets.ciscodude.net/saltstack-sysadmin.html "},"saltstack/salt-header-in-managed-files.html":{"url":"saltstack/salt-header-in-managed-files.html","title":"SALT | Header in managed files","keywords":"","body":"SALT | custom header in files und directories Weblinks http://russell.ballestrini.net/add-a-custom-header-to-all-salt-managed-files-using-pillar-and-jinja-templates/ "},"saltstack/salt-highstate-as-scheduled-job.html":{"url":"saltstack/salt-highstate-as-scheduled-job.html","title":"SALT | Highstate as scheduled job","keywords":"","body":"SALT | Highstate as scheduled job (config pull) folgendes in die eintragen: schedule: highstate: function: state.highstate minutes: 60 Weblinks https://docs.saltstack.com/en/latest/topics/jobs/#scheduling-highstates "},"saltstack/salt-install-salt-with-salt-ssh.html":{"url":"saltstack/salt-install-salt-with-salt-ssh.html","title":"SALT | install salt with salt-ssh","keywords":"","body":"SALT | install salt with salt-ssh Weblinks http://bencane.com/2016/07/19/using-salt-ssh-to-install-salt/ "},"saltstack/salt-pillars.html":{"url":"saltstack/salt-pillars.html","title":"SALT | Pillars","keywords":"","body":"SALT | Pillars Weblinks https://github.com/saltstack/salt/issues/32144 "},"cli-magic.html":{"url":"cli-magic.html","title":"CLI Magic","keywords":"","body":"CLI-Magic commandline magic http://steve-parker.org/sh/quickref.shtml "},"cli_magic/cli-bash-skripting.html":{"url":"cli_magic/cli-bash-skripting.html","title":"CLI | Bash Skripting (DE)","keywords":"","body":"CLI | Bash Skripting "},"cli_magic/cli-bash-skripting/cli-bash-scripting-grundlagen.html":{"url":"cli_magic/cli-bash-skripting/cli-bash-scripting-grundlagen.html","title":"Grundlagen (DE)","keywords":"","body":"CLI | Bash Scripting Grundlagen Skriptbeispiele. Hier findet Ihr einige Skriptbeispiele aus unseren Trainings und Projekterfahrungen. Mit Bash-Skripten kann man fast alles realisieren, was ein Netzwerkadministrator für den Hausgebrauch benötigt, sei es das automatische Setzen von Berechtigungen für Samba-Freigaben oder das Prüfen einer eingebundene Netzwerkressource. Skript mit Parametern aufrufen und auswerten #! /bin/bash # Skriptname: parameter.sh # lese 1. Parameter PARA1=$1 # lese 2. Parameter PARA2=$2 # Ausgabe der Parameter echo $PARA1 $PARA2 Wird ein Skript mit Parameter aufgerufen, so können diese Parameter mit den Variablen $1,$2,$3usw. weiterverarbeitet werden. Ruft man also das Skript parameter.sh folgendermaßen auf: # parameter.sh wert1 wert2so erhält man die Ausgabe: wert1 wert2 IP-Adresse, default Gateway und DNS-Server manuell ändern #! /bin/bash netzkarte=eth0 ip=192.168.1.99 nm=255.255.255.0 gw=192.168.1.1 # ip adresse einstellen ifconfig $netzkarte $ip netmask $nm # Hier wird das Netzwerkgerät (eth0) manuell auf eine andere IP-Adresse eingestellt. # route einstellen route del default route add default gw $gw # Das Standardgateway wird gelöscht und anschließend auf den neuen Wert der Variablen $gw gesetzt. # dns eintragen echo \"nameserver $gw\" > /etc/resolv.conf # Schreibt den DNS-Server (in diesem Fall gleich dem Standardgateway) in die Datei /etc/resolv.conf IF-Beispiel mit Eingabe einer Zahl #! /bin/bash read -p \"Gib eine Zahl ein: \" antwort # prüfe ob antwort 1 ist if [ $antwort = 1 ] ; then echo \"Die Antwort ist 1\" else echo \"falsch!!! looser\" fi In diesem Beispiel wird die Variable $antwort abgefragt und mit der Testanweisung überprüft. IF-Beispiel! Überprüfung, ob ein Verzeichnis vorhanden ist #! /bin/bash CHECKDIR=\"/mnt/sicherung\" # prüfe ob /mnt/sicherung vorhanden ist if [ -d $CHECKDIR ]; then echo \"Ja das Verzeichnis ist da\" else echo \"Verzeinis nicht gefunden lege an...\" mkdir $CHECKDIR fi Eine weitere Variante ist das Überprüfen von Dateien und Verzeichnissen. Im vorliegenden Fall wird geprüft, ob das Verzeichnis /mnt/sicherung existiert, im Nein-Fall wird das Verzeichnis angelegt. Mehrfachselektion #! /bin/bash read -p \"Soll ich weitermachen? (j/n) \" antwort case $antwort in j|J) echo \"Weiter \" ;; n|N) echo \"ich stoppe \" ;; *) echo \"falsch Eingabe\" esac Mehrfachselektionen können mit case abgehandelt werden. Die Besonderheit ist das doppelte Semikolon welches die break-Anweisung sendet. Hier wird eine Variable $antwort eingelesen und auf die Buchstaben \"j, J\" oder \"n, N\" hin geprüft. Einfache While-Wiederholung (Schleife) #! /bin/bash weiter=\"j\" while [ $weiter = \"j\" ] ; do echo \"Die schleife läuft\" read -p \"Nochmal? (j/n) \" weiter done Im gezeigten Beispiel läuft eine Schleife solange die Variable $weiter den Wert \"j\" besitzt. Pro Schleifendurchlauf wird die Variable $weiter mit dem read Kommando wieder neu eingelesen! Dateien zeilenweise durchlaufen Die Beispieldatei liste1.txt enthält folgende Werte: liste1.txt apfel birne banane alles obst ende gelände Mit dem nachfolgenden Shellskript wird diese Datei zeilenweise durchlaufen. Jeder Wert steht somit in der Variable $daten und kann entsprechend weiterverarbeitet werden. #! /bin/bash for daten in $(cat liste1.txt); do echo \"$daten\" done Zählerschleifen Zählerschleifen wie man sie von anderen Programmiersprachen kennt, sind bei Bash Scripting natürlich auch möglich #! /bin/bash for (( i=10; i > 0; i-- )) ; do echo $i; done Lustiges Beispiel mit akustischem Signal Bei diesem Beispiel muss das Paket beep installiert sein! #! /bin/bash echo \"A C H T U N G ...\" for (( i=10; i > 0; i-- )) ; do let sound=($i*250) echo \"Frequenz: $sound\" beep -f $sound sleep 0.3 done beep -f 100 -l 800 echo \"E N D E !!!\" Jedes Zeichen einer Zeichenkette abarbeiten #! /bin/bash # # Diese Schleife durchläuft den String # Zeichenweise. n = Zähler # S=\"abcdefg123456789\"; n=0; while [ $n -lt ${#S} ]; do echo ${S:n:1} n=$(( $n + 1 )) done; Zeile 8: Ein String wird in der Variable $S angelegt. Zeile 11: Mit der Anweisung ${#S} wird die Anzahl Zeichen von $S ermittelt. Die Schleife läuft solange $n kleiner als die Anzahl Zeichen in $S. Zeile 13: Mit der Anweisung ${S:n:1} wird an Stelle n ein Zeichen mit Länge 1 ausgelesen. Zeile 14: Erhöht den Zähler n pro Schleifendurchlauf um 1. Arrays in einem Bash Skript Dieses Beispiel zeigt, wie man indexbasierte Arrays abarbeitet. #! /bin/bash # Array Variable mit Werten füllen arrayVariable[0]=\"birne\" arrayVariable[1]=\"apfel\" arrayVariable[2]=\"banane\" # Array durchlaufen for werte in \"${arrayVariable[@]}\"; do echo $werte; done Funktionen verwenden Das nachfolgende Beispiel zeigt wie ein Skript mit genau 2 Parameter aufgerufen wurde. #! /bin/sh printUsage () { echo \"Usage file \" exit 1 } if [ $# -ne 2 ]; then printUsage fi Links https://die-efi.de/tutorials-a-howtos/88-linux/81-bash-scripting "},"cli_magic/dd-progressbar.html":{"url":"cli_magic/dd-progressbar.html","title":"CLI | dd progressbar (DE)","keywords":"","body":"CLI | dd Progressbar Problem „Ich will einen Fortschritt bei dd sehen“ „Ich will wissen wie weit dd ist und wie lange es noch dauert*ningl*“ Ursache ddbietet bot früher von Haus aus keine Fortschrittsanzeige. (jetzt geht es mit status=progress) Lösung Man nimmt pv zu Hilfe und pipe-t (der Senkrecht-Strich|) die Daten zuddZur Not muss manpveben nachinstallieren. Das sieht im Folgenden so aus… pv -tpreb | dd of= die Parameter -tpreb zeigen den Fortschrittsbalken, ETA, Übertragungsrate, etc… an mehr dazu auf der man page des Programms Links http://linux.die.net/man/1/pv "},"cli_magic/nur-dateinamen-ausgeben.html":{"url":"cli_magic/nur-dateinamen-ausgeben.html","title":"CLI | nur Dateinamen ausgeben (DE)","keywords":"","body":"CLI | nur Dateinamen ausgeben Folgende CLI Magic ermöglicht es aus einem/ einem Dateipfad mit variabler Verzeichnistiefe (z.B./irgend/ein/Pfad/zu/einer/.) , nur die.herauszufiltern. (z.B wenn basename nicht zur Verfügung steht) Möglichkeit 1 | rev | cut -d'/' -f1 | rev von der Ausgabe wird die Zeichenfolge mitrevumgedreht. Dadurch ist das letzte/das Erste. Danach wird mitcutauf das erste/gefiltert und die Reihenfolge wieder umgekehrt. Möglichkeit 2 (wenn nurcutzur Verfügung steht) kleiner Trick auf aus einer Ausgabe (z.B. find) sich nur die Dateinamen + Endung ausgeben zu lassen.Bei unbekannter Verzeichnistiefe. | cut -d'/' -f2- | cut -d'/' -f2- | cut -d'/' -f2- | cut -d'/' -f2- | ... …- ensprechend weiter fortsetzen Weblinks http://stackoverflow.com/questions/22727107/how-to-find-the-last-field-using-cut-linux "},"cli_magic/logging-im-bash-skript.html":{"url":"cli_magic/logging-im-bash-skript.html","title":"CLI | Logging im bash skript (DE)","keywords":"","body":"CLI | Logging im bash skript folgendes Codeschnipsel am Anfang vom Skript bewirkt, dass die komplette Bildschirmausgabe (auch remote-Sessions) ins Logfile geschrieben wird. [...] # Logging LOG=\"/var/log/$(basename $0.log)\" exec > >(tee -a $LOG ) 2>&1 # Kosmetik / Header fürs Log echo -e \"\\n---------------------------------------------------------------------------------------------\\n $(date) \\n ---------------------------------------------------------------------------------------------\" > $LOG [...] "},"cli_magic/dmesg-fortlaufend-anzeigen-lassen.html":{"url":"cli_magic/dmesg-fortlaufend-anzeigen-lassen.html","title":"CLI | dmesg fortlaufend anzeigen lassen (DE)","keywords":"","body":"CLI | dmesg fortlaufend anzeigen lassen als user: watch -n 1 'dmesg|tail -n 20' als root: while sleep 0.1; do dmesg -c; done Weblinks http://mitschang.net/software/ "},"cli_magic/live-ssh-network-throughput-test.html":{"url":"cli_magic/live-ssh-network-throughput-test.html","title":"CLI | live ssh network throughput test","keywords":"","body":"CLI | live ssh network throughput test yes | pv | ssh @ \"cat > /dev/null\" Weblinks https://blog.urfix.com/9-tricks-pv-pipe-viewer/ "},"cli_magic/lvm-thinprovisioned-volume-erstellen.html":{"url":"cli_magic/lvm-thinprovisioned-volume-erstellen.html","title":"CLI | create LVM thinprovisioned Volumes","keywords":"","body":"CLI | create LVM thinprovisioned Volumes pvcreate /dev/sda vgcreate vg01_bricks /dev/sda lvcreate -l 100%FREE -T vg01_bricks/lv_thinpool ... mkfs.ext4 /dev/mapper/vg01_bricks-lv_thinpool Weblinks https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Logical_Volume_Manager_Administration/thinly_provisioned_volume_creation.html http://blog.gluster.org/2014/10/gluster-volume-snapshot-howto/ "},"cli_magic/os-version-anzeigen.html":{"url":"cli_magic/os-version-anzeigen.html","title":"CLI | OS Version anzeigen","keywords":"","body":"CLI | OS Version anzeigen Ubuntu cat /etc/lsb-release DISTRIB_ID=Ubuntu DISTRIB_RELEASE=9.04 DISTRIB_CODENAME=jaunty DISTRIB_DESCRIPTION=\"Ubuntu 9.04\" Debian cat /etc/debian_version 5.0.2 CentOS cat /etc/centos-release CentOS Linux release 7.0.1406 (Core) RedHat Red Hat/CentOS: cat /etc/redhat-release CentOS release 5.3 (Final) Fedora cat /etc/fedora-release Fedora release 10 (Cambridge) Weblinks http://superuser.com/questions/11008/how-do-i-find-out-what-version-of-linux-im-running "},"cli_magic/pbzip2-parallel-packen.html":{"url":"cli_magic/pbzip2-parallel-packen.html","title":"CLI | pbzip2 parallel packen (DE)","keywords":"","body":"CLI | pbzip2 - parallel packen geht schneller verbraucht weniger Platz Einpacken: tar vcf myfile.tbz2 --use-compress-prog=pbzip2 dir_to_compress/ ODER tar -vc directory_to_compress/ | pbzip2 -vc > myfile.tar.bz2 Auspacken: (muss ge„pipe“t werden) pbzip2pbzip2 -dck | tar xvf - Links http://compression.ca/pbzip2/ "},"cli_magic/schreibmaschine-simulieren.html":{"url":"cli_magic/schreibmaschine-simulieren.html","title":"CLI | Schreibmaschine simulieren","keywords":"","body":"Schreibmaschine simulieren echo \"You can simulate on-screen typing just like in the movies\" | pv -qL 10 -ql 10- gibt an wieviele Zeichen pro Sekunde geschrieben werden sollen Bearbeiten Weblinks https://blog.urfix.com/9-tricks-pv-pipe-viewer/ "},"cli_magic/pdfs-scannen.html":{"url":"cli_magic/pdfs-scannen.html","title":"CLI | PDFs scannen (DE)","keywords":"","body":"CLI | PDFs scannen PDF-Bearbeitung Mit convert können bspw. gescannte Dokumente als PDF gespeichert werden. Die Befehls-Syntax zum einfachen Speichern einer PNG-Datei im PDF-Format lautet: convert quelle.png ziel.pdf Mit folgendem Befehl kann man Bilder aus PDF-Dateien extrahieren: pdfimages -j quelle.pdf zielverzeichnis Praktisch ist auch die Verwendung von Wildcards, um mehrere Bilder in ein PDF umzuwandeln. Folgender Befehl wandelt bspw. alle im momentanen Arbeitsordner befindlichen .jpg-Dateien in ein mehrseitiges PDF um: convert *.jpg ziel.pdf Will man mehrere Bilder in einem Ordner zu einem druckfertigen PDF Dokument mit gleichmäßiger DINA4-Anpassung zusammenfügen, hilft folgender Befehl: convert *.* -compress jpeg -resize 1240x1753 -units PixelsPerInch -density 150x150 -page a4 multipage.pdf Links http://wiki.ubuntuusers.de/ImageMagick#convert "},"cli_magic/ssh-key-loschen.html":{"url":"cli_magic/ssh-key-loschen.html","title":"CLI | SSH Key löschen (DE)","keywords":"","body":"CLI | SSH Key löschen ssh-keygen -f \"/PFAD/ZU/.ssh/known_hosts\" -R "},"cli_magic/suchen-in-mehreren-dateien.html":{"url":"cli_magic/suchen-in-mehreren-dateien.html","title":"CLI | Suchen in mehreren Dateien (DE)","keywords":"","body":"CLI | Suchen in mehreren Dateien mit grep: grep -r \"\" / -r - recursive mit find: find / -type f -exec grep -l '' {} \\; Links https://forums.opensuse.org/showthread.php/471286-mit-grep-alle-nachfolgenden-verzeichnisse-durchsuchen "},"cli_magic/suchen-und-entpacken.html":{"url":"cli_magic/suchen-und-entpacken.html","title":"CLI | Suchen und Entpacken (DE)","keywords":"","body":"CLI | Suchen und Entpacken find ./ -type f -iname \"*.tar.bz2\" -exec tar xvjf {} \\; "},"cli_magic/suchen-und-ersetzen-in-mehreren-dateien.html":{"url":"cli_magic/suchen-und-ersetzen-in-mehreren-dateien.html","title":"CLI | Suchen und Ersetzen in mehreren Dateien (DE)","keywords":"","body":"CLI | Suchen und Ersetzen in mehreren Dateien find // -type f -exec sed -i '' -e 's///g' {} \\; Änderungen werden rekursiv auf alle Dateien in// angewandt damit Zeichen (wie z.B. das/oder ein:) nicht als Steuerzeichen erkannt werden, muss dieses dann explizit \"exiten\" (ein\\vorangestellen) Links http://www.tecchannel.de/storage/tipps/2033812/suchen_und_ersetzen_in_dateien_unter_linux/ "},"cli_magic/suchen-und-loschen.html":{"url":"cli_magic/suchen-und-loschen.html","title":"CLI | Suchen und Löschen (DE)","keywords":"","body":"CLI | Suchen und Löschen in der Konsole Dieses Vorgehen benutzt man, um bestimmte Dateien zu suchen und gleichzeitig auch zu löschen. Allgemeine Syntax: find dir-name criteria action dir-name: - Defines the working directory such as look into /tmp/ criteria: Use to select files such as „*.sh“ action: The find action (what-to-do on file) such as delete the file. jetzt genauer:löscht Dateien_und_Ordner: find . -name \"FILE-TO-FIND\" -exec rm -rf {} \\; löscht nur Dateien: find . -type f -name \"FILE-TO-FIND\" -exec rm -f {} \\; -name „FILE-TO-FIND“: File pattern. -exec rm -rf {} \\;: Delete all files matched by file pattern. -type f: Only match files and do not include directory names. Mit-inameanstatt-namekann man auch Wildcards wie?oder*benutzen. Bsp.: fo*undF??→Foo``,FOO`,foo,fOo`, etc Die Befehle mit Bedacht einsetzen, sonst werden ungewollt Dateien gelöscht Vorher besser mitfind . -name „FILE-TO-FIND“ohne-exec rm -rf {} \\;überprüfen, ob die Syntax stimmt. Links http://www.cyberciti.biz/faq/linux-unix-how-to-find-and-remove-files/ "},"cli_magic/tar-mit-progressbar.html":{"url":"cli_magic/tar-mit-progressbar.html","title":"CLI | tar mit Progressbar (DE)","keywords":"","body":"CLI | tar mit Progressbar mit Hilfe von pv mittels du wird die Größe des Verzeichnisses ermittelt tar -cf - . | pv -s $(du -sb . | awk '{print $1}') | gzip > out.tgz Weblinks http://www.catonmat.net/blog/unix-utilities-pipe-viewer/ "},"cli_magic/top-10-prozesse-anzeigen-lassen.html":{"url":"cli_magic/top-10-prozesse-anzeigen-lassen.html","title":"CLI | Top 10 Prozesse anzeigen lassen (DE)","keywords":"","body":"CLI | Top 10 Prozesse anzeigen lassen die 10 Prozesse mit der meisten CPU-Load anzeigen lassen (sortiert) ps -Ao user,uid,comm,pid,pcpu,tty --sort=-pcpu | head -n 10 "},"cli_magic/zufallszahlen-in-der-shell.html":{"url":"cli_magic/zufallszahlen-in-der-shell.html","title":"CLI | Zufallszahlen in der Shell (DE)","keywords":"","body":"CLI | Zufallszahlen in der Shell Umgebungsvariablen:$RANDOM Ausgeben: echo $RANDOM Zahlen zwischen 0 und 99 echo $(($RANDOM % 100)) Wertebereich von 1 bis 100 echo $(($RANDOM % 100 + 1)) Weblinks http://www.tippscout.de/linux-bash-zufallszahl_tipp_2915.html "},"cli_magic/cli-gpg.html":{"url":"cli_magic/cli-gpg.html","title":"CLI | GPG","keywords":"","body":"CLI | GPG Encrypt Text in a file echo \"\" | gpg --encrypt --sign --armor -r > .gpg Decrypt Text from a file cat .gpg | gpg -d "},"container-magic.html":{"url":"container-magic.html","title":"Docker-Magic","keywords":"","body":"Container-Magic "},"docker-cheatsheet.html":{"url":"docker-cheatsheet.html","title":"DOCKER | Cheatsheet","keywords":"","body":"DOCKER | Cheatsheet docker cleanup one-liner: deletes old containers and images docker ps -a | grep \"Exit\\|Created\" | cut -d ' ' -f 1 | xargs sudo docker rm; docker images | grep \"\" | awk '{print $3}' | xargs sudo docker rmi "},"docker-ssh-and-gogs.html":{"url":"docker-ssh-and-gogs.html","title":"DOCKER | SSH and Gogs","keywords":"","body":"DOCKER | SSH and Gogs Links: https://web.archive.org/web/20161017143411/http://www.ateijelo.com/blog/2016/07/09/share-port-22-between-docker-gogs-ssh-and-local-system "},"docker-save-vs-export.html":{"url":"docker-save-vs-export.html","title":"DOCKER | save vs. export","keywords":"","body":"DOCKER | save vs. export Link: https://web.archive.org/web/20170625175849/http://tuhrig.de/difference-between-save-and-export-in-docker/ "},"git.html":{"url":"git.html","title":"Git-Magic","keywords":"","body":"GIT-Magic Links https://pgi-jcns.fz-juelich.de/pub/doc/git_gitflow.pdf "},"git-subtrees.html":{"url":"git-subtrees.html","title":"GIT | Subtrees","keywords":"","body":"GIT | Subtrees Setup git remote add git@github.com:/.git git subtree add --prefix=/ master Pull changes from sub-repo git subtree pull --prefix= master Push changes to sub-repo Links: https://medium.com/@v/git-subtrees-a-tutorial-6ff568381844 "},"git-alle-remote-branches-holen.html":{"url":"git-alle-remote-branches-holen.html","title":"GIT | alle remote Branches holen","keywords":"","body":"GIT | alle remote Branches holen for remote in `git branch -r`; do git branch --track ${remote#origin/} $remote; done "},"git-cherry-pick.html":{"url":"git-cherry-pick.html","title":"GIT | Cherry-Pick","keywords":"","body":"GIT | Cherry-Pick Links: http://think-like-a-git.net/sections/rebase-from-the-ground-up/cherry-picking-explained.html "},"git-create-a-new-branch-with-no-history.html":{"url":"git-create-a-new-branch-with-no-history.html","title":"GIT | Create a new Branch with no history","keywords":"","body":"GIT | Create a new Branch with no history this creates a from the current branch, with the last commit as the only commit. (no history) git branch $(echo \"init commit\" | git commit-tree HEAD^{tree}) "},"git-forking.html":{"url":"git-forking.html","title":"GIT | Forking","keywords":"","body":"GIT | Forking Links: https://help.github.com/articles/syncing-a-fork/ https://help.github.com/articles/merging-an-upstream-repository-into-your-fork/ https://gist.github.com/Chaser324/ce0505fbed06b947d962 "},"github-pages.html":{"url":"github-pages.html","title":"GITHUB | Pages","keywords":"","body":"GITHUB | Pages http://www.stephaniehicks.com/githubPages_tutorial/pages/github-intro.htmlhttp://www.stephaniehicks.com/githubPages_tutorial/pages/github-intro.html gh-pages compatible projects: https://www.gitbook.com/ (or nearly every static nodeJS site) https://jekyllrb.com/docs/github-pages/ https://gohugo.io/ https://gohugo.io/hosting-and-deployment/hosting-on-github/ "},"maker-magic.html":{"url":"maker-magic.html","title":"Maker-Magic","keywords":"","body":"Maker-Magic "},"maker-magic/rpi-accessoires.html":{"url":"maker-magic/rpi-accessoires.html","title":"RPI | Accessoires","keywords":"","body":"RPI | Accessoires https://www.amazon.de/Widerstand-Sortiment-EFANTUR-Stk-Widerst%C3%A4nde/dp/B077VJFF2N/ref=pd\\_sim\\_107\\_5?\\_encoding=UTF8&psc=1&refRID=F5915VCHRWJWM2VG1AX8 "},"maker-magic/rpi-breadboard.html":{"url":"maker-magic/rpi-breadboard.html","title":"RPI |  Breadboard","keywords":"","body":"RPI | Breadboard Links https://tutorials-raspberrypi.de/raspberry-pi-gpio-erklaerung-beginner-programmierung-lernen/ https://www.datenreise.de/raspberry-pi-wie-verwendet-man-ein-breadboard-steckplatine-anleitung/ https://web.archive.org/web/20180316084308/https://www.w3schools.com/nodejs/nodejs\\_raspberrypi\\_components.asp "},"maker-magic/rpi-gpio-layout.html":{"url":"maker-magic/rpi-gpio-layout.html","title":"RPI | GPIO Layout","keywords":"","body":"RPI | GPIO Layout Links https://www.raspberrypi.org/documentation/usage/gpio/ http://raspberrypiguide.de/howtos/raspberry-pi-gpio-how-to/ https://de.pinout.xyz/ https://github.com/raspberrypi/documentation/blob/master/usage/gpio/README.md https://thepihut.com/blogs/raspberry-pi-tutorials/27968772-turning-on-an-led-with-your-raspberry-pis-gpio-pins "},"maker-magic/rpi-multiroom-audio.html":{"url":"maker-magic/rpi-multiroom-audio.html","title":"RPI | Multiroom Audio","keywords":"","body":"RPI | Multiroom-Audio (synchron) Volumio (mpd) + SpotifyConnect +Snapcast(+ Shariplay)(geht bestimmt auch mit RuneAudio) Features Multiroom-Wiedergabe (synchrone Wiedergabe auf mehreren Lautsprechern) von lokalen Medien (mpd) Streams von Webradios Spotify (SpotifyConnect) Airplay (shairplay) Setup ein Raspi als zentraler Server für alle Dienste mehrere Raspis als Client - empfangen einen synchronen Stream vom Server verbunden per LAN/WLAN Übersicht or Spotify NAS/Webradio/etc. │ ♫\"lalla\"♪ │ │ │ │ │ │ │ ╔═▼════════════╦═▼══╗ WiFi / LAN ╔══════════╗ ║spotifyConnect║ mpd║ ║ ║ ╠═▼════╦═══════╩═▼══╣ ╠══════════╣ ║ │ ┌──▶ \"snapfifo\" ║ ║ ║ ║ │ │ ╠═══▼════════╣ ╠══════════╣ ║ │ │ ║ snapserver ▶──────────┐ ║ ║ ║ │ │ ╠═══▼════════╣ │ ╠══════════╣ ║ │ │ ║ snapclient ║ └──SYNC──▶snapclient║ ╠═│═│══╩═══▼════════╣ │ ╠══════════╣ ║ └⚙┘ ALSA ║ │ ║ ALSA ║ ╚══════════▼════════╝ │ ╚═════▼════╝ │ │ │ ▼ │ ▼ │ ♫\"lalla\"♪ │ ♫\"lalla\"♪ │ │ │ │ ╔══════════╗ │ ║ ║ │ ╠══════════╣ │ ║ ║ │ ╠══════════╣ │ ║ ║ │ ╠══════════╣ └──SYNC──▶snapclient║ ╠═════▼════╣ ║ ALSA ║ ╚═════▼════╝ │ ▼ ♫\"lalla\"♪ „snapfifo“ =/tmp/snapfifo-Pipe ⚙= Umwandlung des Audiostreams in eine Pipe Server (datt Ding, wo die Musik reinkommen tut…) Voraussetzung Volumio ist installiert Software nachinstallieren sudo apt-get update sudo apt-get install build-essential git sudo apt-get install libboost-dev libboost-system-dev libboost-program-options-dev libasound2-dev libvorbis-dev libflac-dev alsa-utils libavahi-client-dev avahi-daemon snapcast ausm git installieren Sourcen runterladen… git clone https://github.com/badaix/snapcast.git cd snapcast/externals/ git submodule update --init --recursive cd .. compilieren… make all Server und Client installieren… sudo make installserver sudo make installclient Anpassungen ''/etc/mpd.conf'' anpassen altes Zeux auskommentieren /etc/mpd.conf #audio_output { # # type \"alsa\" # name \"Output\" # device \"hw:0,0\" # dop \"no\" # #} folgendes hinzufügen /etc/mpd.conf audio_output { type \"fifo\" name \"snapcast\" path \"/tmp/snapfifo\" # format \"44100:16:2\" format \"48000:16:2\" # codec \"flac\" mixer_type \"software\" } ''/etc/default/snapserver'' anpassen SNAPSERVER_OPTS=\"-d -s pipe:///tmp/snapfifo?name=multiroom&mode=read\" Alternativ: bei mehreren Räumen/Streams: SNAPSERVER_OPTS=\"-d -s pipe:///tmp/snapfifo-room_1?name=room_1&sampleformat=48000:16:2&codec=flac -s pipe:///tmp/snapfifo-room_2?name=room_2&sampleformat=48000:16:2&codec=flac -s pipe:///tmp/snapfifo-room_3?name=room_3&sampleformat=48000:16:2&codec=flac\" SpotifyConnect installieren + einrichten Spotify Key beantragen (geht nur mir einen Spotify Premiumaccount) einloggen unter: https://devaccount.spotify.com/my-account/keys/ eine „App“ anlegen und App-Key als „Binary“ herunterladen (spotify_appkey.key) Spotify installieren Skript herunterladen curl -O curl -OL https://github.com/Fornoth/spotify-connect-web/releases/download/0.0.3-alpha/spotify-connect-web.sh chmod u+x spotify-connect-web.sh pre-built chroot installieren # Download the current chroot (~ 180 MB) ./spotify-connect-web.sh install App-Key kopieren # Copy your `spotify_appkey.key` into the app directory. (See below for information on how to get that file.) sudo cp spotify_appkey.key spotify-connect-web-chroot/usr/src/app/ testen # Run using normal cmdline options ./spotify-connect-web.sh --username 1234 --password abcd --bitrate 320 --name Volumio --playback_device plughw:CARD=ALSA,DEV=0 Anpassungen „snapfifo“ löschen & als pipe neu anlegen rm -Rfv /root/spotify-connect-web-chroot/tmp/snapfifo mknod /root/spotify-connect-web-chroot/tmp/snapfifo p asound.conf (chroot) anlegen Spotify wird ja in einer eigenen chroot ausgeführt. Dort muss ALSA mitgeteilt werden, dass seine Ausgabe in eine Pipe umgeleitet werden soll… /root/spotify-connect-web-chroot/etc/asound.conf # 's Spotify Connect Einstellung ####################################################################### pcm.! { type plug # slave.pcm rate44100Hz slave.pcm rate48000Hz } #pcm.rate44100Hz { pcm.rate48000Hz { type rate slave { pcm writeFile # Direct to the plugin which will write to a file format S16_LE # rate 44100 rate 48000 } } pcm.writeFile { type file slave.pcm null file \"/tmp/snapfifo-spotify-\" # file \"/root/spotify-connect-web-chroot/tmp/snapfifo\" format \"raw\" } ####################################################################### fstab anpassen Um das„echte“/tmp-Verzeichnis in der chroot verfügbar zu machen, ergänzen wir noch eine Zeile in der/etc/fstab /tmp /root/spotify-connect-web-chroot/tmp/ none bind 0 0 Testen (SpotifyConnect starten) /root/spotify-connect-web.sh --username --password --bitrate 320 --name s_Volumio -o wenn der Dienst gestartet ist sollte in $einer Spotify-Anwendung folgende zusätzliche Wiedergabe-Optionen verfügbar sein Systemd Unit anlegen zuerst eine kleine Config für die Unit in/etc/default/spotify-conncectanlegen: # User 1 ###################s USER1= PW1= BITRATE1=320 NAME1= ALSA1= # Name der Chain in /etc/asound.conf dann die Unit selbst unter/lib/systemd/system/spotify-conncect-.serviceanlegen: [Unit] Description=Spotify Connect Service von $USER1 After=network.target [Service] EnvironmentFile=-/etc/default/spotify-conncect Type=idle #ExecStartPre=/bin/sleep 25 ExecStart=/root/spotify-connect-web.sh --username $USER1 --password $PW1 --bitrate $BITRATE1 --name $NAME1 -o $ALSA1 Restart=always RestartSec=10 StartLimitInterval=30 StartLimitBurst=20 [Install] WantedBy=multi-user.target Units neu laden & Dienst starten systemctl daemon-reload systemctl enable spotify-connect-.service systemctl restart spotify-connect-.service Weblinks http://powerpi.de/spotify-connect-auf-dem-raspberry-pi-2-installieren-dein-smartphone-ist-die-fernbedienung/ http://www.runeaudio.com/forum/spotify-connect-autostart-t3315.html https://discourse.osmc.tv/t/howto-setup-a-spotify-connect-web-server-on-a-raspberry-pi-with-osmc/15818 https://github.com/Fornoth/spotify-connect-web https://dennis-henke.de/2016/01/27/spotify-connect-server-raspberry-pi/ https://github.com/badaix/snapcast/issues/75 Client(s) (die Dinger, wo die Musik rauskommen tut…) Voraussetzung raspian (Debian 8 minimal) optional: Filesystem vergrößern: apt-get install raspi-config raspi-config # Filesystem vergrößern... Software nachinstallieren sudo apt-get update sudo apt-get install libboost-dev libboost-system-dev libboost-program-options-dev libasound2-dev libvorbis-dev libflac-dev alsa-utils libavahi-client-dev avahi-daemon nano git gcc g++ make snapcast ausm git installieren Sourcen runterladen… git clone https://github.com/badaix/snapcast.git cd snapcast/externals/ git submodule update --init --recursive cd .. compilieren… make all nur Client installieren… sudo make installclient Wifi einrichten Firmware installieren: apt-get update apt-get install -firmware-realtek;firmware-atheros;firmware-ralink; je nach verwendeteten WLAN-Adapter WPA-Supplicant installieren: apt-get install wpasupplicant Interface anpassen (Inhalt hinzufügen): /etc/network/interfaces network={ ssid=\"\" psk=\"\" } rebooten Weblinks https://volumio.org/forum/multiroom-audio-output-from-volumio-with-snapcast-t3217.html https://github.com/badaix/snapcast https://minibianpi.wordpress.com/how-to/wifi/ https://hackerdads.wordpress.com/2016/05/07/multi-room-audio-with-open-source-software-and-cheap-hardware/ http://powerpi.de/spotify-connect-auf-dem-raspberry-pi-2-installieren-dein-smartphone-ist-die-fernbedienung/ http://www.redsilico.com/multiroom-audio-raspberry-pi "},"maker-magic/rpi-sensoren.html":{"url":"maker-magic/rpi-sensoren.html","title":"RPI | Sensoren","keywords":"","body":"RPI | Sensoren DHT11 / DH22 - Luftfeuchtigkeits-, Temperatur Sensor http://www.uugear.com/portfolio/dht11-humidity-temperature-sensor-module/ https://www.amazon.de/IZOKEE-digitaler-Feuchtigkeit-Temperatur-Sensor-Raspberry/dp/B077PQWZ1K/ref=sr_1_13?ie=UTF8&qid=1520281495&sr=8-13&keywords=raspberry+temperatur http://www.instructables.com/id/DHT11-Raspberry-Pi https://klenzel.de/5793 https://www.raspberrypi-spy.co.uk/2017/09/dht11-temperature-and-humidity-sensor-raspberry-pi/ DS18B20 - Temperatur Sensor (wasserdicht) https://www.amazon.de/Temperatur-Interface-Temperatursensor-wasserdicht-Edelstahlhülse/dp/B018GQN5HE/ref=sr_1_9?ie=UTF8&qid=1520318960&sr=8-9&keywords=DS18B20 https://codingworld.io/shop/ds18b20-one-wire-temperatursensor-outdoor https://github.com/kybernetyk/tempsense http://www.d3noob.org/2015/02/raspberry-pi-multiple-temperature.html http://www.reuk.co.uk/wordpress/raspberry-pi/connect-multiple-temperature-sensors-with-raspberry-pi/ BMP180 - Luftdruck-, Temperatur Sensor https://thepihut.com/blogs/raspberry-pi-tutorials/18025084-sensors-pressure-temperature-and-altitude-with-the-bmp180 https://tutorials-raspberrypi.de/raspberry-pi-und-i2c-luftdrucksensor-bmp180/ https://www.einplatinencomputer.com/raspberry-pi-luftdrucksensor-bmp180-ansteuern/ https://github.com/coding-world/Python_BMP BM680 - Temperatur, Feuchtigkeit, Druck und Gas Sensor https://shop.pimoroni.de/products/bme680 https://github.com/BoschSensortec/BME680_driver https://www.pi-shop.ch/adafruit-bme680-temperatur-feuchtigkeit-druck-und-gas-sensor andere: http://dev-random.net/temper-v1-4-usb-thermometer-temperature-recorder-review/ https://willy-tech.de/temperatursensor-an-raspberry-pi/ https://www.dexterindustries.com/GrovePi/supported-sensors/ https://eckstein-shop.de/Sensor "},"monitoring-magic.html":{"url":"monitoring-magic.html","title":"Monitoring-Magic","keywords":"","body":"Monitoring-Magic "},"monitoring/zabbix.html":{"url":"monitoring/zabbix.html","title":"Zabbix","keywords":"","body":"Zabbix "},"os-magic.html":{"url":"os-magic.html","title":"OS-Magic","keywords":"","body":"OS-Magic "},"freebsd.html":{"url":"freebsd.html","title":"FreeBSD","keywords":"","body":"FreeBSD "},"freebsd/freebsd-zfs.html":{"url":"freebsd/freebsd-zfs.html","title":"FreeBSD | ZFS Cheatsheet","keywords":"","body":"ZFS Cheatsheet "},"freebsd/freebsd-cheatsheet.html":{"url":"freebsd/freebsd-cheatsheet.html","title":"FreeBSD | Cheatsheet","keywords":"","body":"FreeBSD | Cheatsheet General Identifying your disks camcontrol devlist # glabel list ## show UUIDs from partitions Users adduser ## wrapper script to add users chsh ## change user shell and other info pw groupadd teamtwo ## add a group to the system pw groupmod teamtwo -m ## add a user to a group /etc/group ## file to edit groups manually id ## show group membership for current user System Configuration cat /var/run/dmesg.boot ## show boot log with info about disks and pci devices kenv ## show bios, board and chassi info (dump from kernel env) pciconf -l -cv ## show info about PCI devices of the machine camcontrol devlist -v ## list of attached ATA devices ifconfig ## show and configure network interface parameters sysctl ## tool to show/set all system/kernel coniguration variables sysctl -a ## show all system/kernel configuration variables sysctl hw ## show hardware related info and settings sysctl net ## show all network related info and settings sysctl hw.model ## show CPU model sysctl net.inet.tcp.delayed_ack=0 ## disable delayed ack in tcp System Statistics top ## display and update information about the top cpu processes ps auxwww | grep ## display process status CTRL-t ## on running commands will output useful info systat -vmstat 1 ## show general overview of load, memory, interrupts, disk io systat -iostat 1 ## show disk throughput systat -ifstat 1 ## show network throughput for all interfaces systat -netstat 1 ## show netstat output but automatically refreshed systat -tcp 1 ## show tcp statistics ZFS zfs list ## list all zfs datasets (volumes) zfs snapshot /@ ## generic way of creating a snapshot of a dataset in a storage pool zfs snapshot -r tank@2014021301 ## create a snapshot of all datasets in the pool \"tank\" zfs create / ## create a new dataset zfs rollback /@name ## rollback of a dataset to a given snapshot zfs destroy / ## destroy a dataset / remove it from the pool zfs destroy /@name ## destroy a snapshot zfs set = / ## generic way of setting options on a given dataset zfs set compression=lz4 tank/var/log ## enable LZ4 compression on /var/logs zfs get compressratio / ## show the current compression ratio of a dataset zfs send -R tank@snapshot | \\ ## send all datasets@snapshot recursively to another host ssh root@[IP] zfs recv -F tank zfs unmount / ## unmount a zfs dataset zfs upgrade -r ## upgrade all volumes in the pool (technically its the root volume e.g. tank) zpool status ## show health info about currently imported ZFS storage pools zpool scrub ## check all written blocks for consistency zpool iostat -v tank ## show more information about the pool including log devices zpool add mirror ## add two disks as mirror to a storage pool zpool remove ## remove single devices or mirror sets from the storage pool zpool upgrade ## upgrade the storage pool to latest version Software ## Ports portsnap fetch ## fetch the latest portfiles portsnap update ## update the portfiles on disk with the previously fetched portfiles portsnap update -p /usr/jails/basejail/usr/ports ## update ports tree for jails whereis ## show the directory of the portfile cd /usr/ports/*/ ## find the parent directory of a given portname locate | grep ports ## manual way of searching for ports cd && make install ## compile and install a port cd && make config ## re-run configuration of a port when available cd && sudo make deinstall clean reinstall ## upgrade the port ## Packages pkg search ## search for binary packages pkg install ## install binary package and its dependencies pkg delete ## delete an installed package pkg automremove ## remove unneeded dependencies pkg info ## show list of currently installed ports/packages with version info pkg version ## show which ports/packages are outdated and need an update pkg upgrade ## upgrade a packages pkg which ## find out which package installed a given file ## System freebsd-update fetch ## fetch updates from server freebsd-update -r upgrade ## fetch upgrades to specified version (e.g. '10.1-RELEASE') from server freebsd-update install ## install downloaded updates/upgrades Services service -l ## list all available services service -e ## list all enabled services service status ## show the status of the service with the given servicename service start ## start the service with the given servicename service stop ## stop the service with the given servicename service restart ## restart the service with the given servicename service reload ## reload the configuration of the service with the given servicename Network ifconfig inet ## configure IP address on interface ifconfig inet alias ## configure IP address alias on interface ifconfig del ## remove IP address from interface route add -net default ## add default route route add -net ## add a custom route for given network /etc/rc.d/netif restart && \\ ## restart networking and routing after changing the configuration /etc/rc.d/routing restart without rebooting. Execute in tmux or screen session netstat -rn ## display routing table netstat -an ## display all connections netstat -m ## display buffer usage netstat -Lan ## display status of listen queues netstat -s ## display extensive statistics per protocol (use -p tcp to only show tcp) sockstat -l ## display listening sockets, process names and pids sysctl kern.ipc.numopensockets ## display number of open sockets vmstat -z | egrep \"ITEM|tcpcb\" ## number of hash table buckets to handle incoming tcp connections increase net.inet.tcp.tcbhashsize if hitting the limit sysctl net.inet.tcp.hostcache.list ## display current content of hostcache with its parameters per IP Firewall pfctl -si ## show current state table and counters (useful for tuning) pfctl -s state ## show current content of state table IPsec ipsec start ## start VPN and establish (auto=start) VPN connections setkey -D ## show extensive Kernel information about current connections setkey -DP ## show more condensed connection information ipsec statusall [conn] ## show returns detailed status information either on connection or all connections if no name is provided ipsec leases ## show current leases from virtual IP address pool ipsec rereadsecrets ## flushes and rereads all secrets defined in ipsec.secrets ipsec rereadall ## flushes and rereads all secrets defined in ipsec.secrets as well as all certificates and and certificate revocation lists ipsec update ## sends a HUP signal to the daemon that determines any changes in ipsec.conf and updates the configuration on the running IKE daemon charon ipsec reload ## sends a USR1 signal to the daemon that reloads the whole configuration on the running IKE daemon charon based on the actual ipsec.conf ipsec restart ## terminates all ipsec connections, sends a TERM signal to the daemon and restarts it afterwards ipsec stroke up [conn] ## initiate connection [conn] ipsec stroke down [conn] ## terminate connection [conn] ezjail ezjail-admin start|stop ## start and stop all the jails ezjail-admin start|stop | ## start and stop individual jail ezjail-admin list ## list all the jails on the host system ezjail-admin console | ## open root shell into jail ezjail-admin create -f exmaple ## create a new jail ezjail-admin delete -w hostname ## delete the jail (in case you use zfs also delete the volume) Common sysctl's to set hw.usb.no_shutdown_wait=1 ## don't wait for USB devices when shutting down (if your system hangs when rebooting) kern.maxfiles=204800 ## Increase file descriptor limits kern.maxfilesperproc=200000 "},"freebsd/freebsd-tinc.html":{"url":"freebsd/freebsd-tinc.html","title":"FreeBSD | Tinc","keywords":"","body":"FreeBSD | Tinc Links: https://web.archive.org/web/20170923110343/https://wiki.openbeelab.org/index.php/Tinc "},"freebsd/pfsense-lacp-and-jumbo-frames-de.html":{"url":"freebsd/pfsense-lacp-and-jumbo-frames-de.html","title":"pfSense | LACP & Jumbo Frames (DE)","keywords":"","body":"pfSense | LACP & Jumbo Frames Problem will man die MTU bei einem LAGG-Interface z.b. auf9000setzen, hat man das Problem, dass die MTU bei den LAGG-Mitgliedern (physiche Interfaces) nicht auch automatisch geändert werden. man kann dies händisch z.B. mitifconfig re1 mtu 9000 upmachen → bekommt aber Fehlermeldungen bzw. die Änderungen sind nach dem Neustart weg. (nicht peristent) Lösung ShellcmdPaket nachinstallieren und danach folgende Kommandos in der WebGUI eintragen: Command Type ifconfig re1 mtu 9000 up; echo \"re1: mtu 1500 -> 9000\" earlyshellcmd ifconfig re2 mtu 9000 up; echo \"re2: mtu 1500 -> 9000\" earlyshellcmd Erklärung jetzt werden die MTU-Änderungen in einem sehr frühen Boot-Stadium vorgenommen und sind nach dem Neutstart auch wieder verfügbar Weblinks https://redmine.pfsense.org/issues/3922 https://redmine.pfsense.org/issues/2786 http://rx-support.net/article/printer/lacp.html http://www.cyberciti.biz/faq/howto-configure-freebsd-vlans-with-ifconfig-command/ "},"freebsd/freenas-docker.html":{"url":"freebsd/freenas-docker.html","title":"FreeNAS | Docker","keywords":"","body":"FreeNAS | Docker Links: https://web.archive.org/web/20160415212315/http://www.freenas.org:80/blog/docker-done-right/ https://forums.freebsd.org/threads/62198/ "},"linux.html":{"url":"linux.html","title":"Linux","keywords":"","body":" "},"linux/linux-perfomanceanalyse.html":{"url":"linux/linux-perfomanceanalyse.html","title":"Linux Perfomanceanalyse","keywords":"","body":"Linux Perfomanceanalyse https://web.archive.org/web/20170606112846/http://www.brendangregg.com/Slides/LinuxConEU2014_LinuxPerfTools.pdf "},"linux/cjdns-install-on-debian-8.html":{"url":"linux/cjdns-install-on-debian-8.html","title":"CJDNS | install on Debian 8","keywords":"","body":"CJDNS | install on Debian 8 #Dependency apt install nodejs build-essential git cd /opt git clone https://github.com/cjdelisle/cjdns.git cd cjdns ./do ln -s /opt/cjdns/cjdroute /usr/bin umask 077 && ./cjdroute --genconf > /etc/cjdroute.conf cp contrib/systemd/cjdns.service /etc/systemd/system/ systemctl enable cjdns systemctl start cjdns "},"ssh.html":{"url":"ssh.html","title":"SSH","keywords":"","body":"SSH "},"ssh/proxies-und-jumphosts-en.html":{"url":"ssh/proxies-und-jumphosts-en.html","title":"Proxies und Jumphosts (en)","keywords":"","body":"Proxies und Jumphosts (en) Passing through a gateway or two A useful trick is „ssh -tt“ which forces tty allocation, so instead of the above you can do the following, connecting to server2 via firewall as the jump host: ssh -tt firewall.example.com ssh -tt server2.example.org This opens an ssh terminal to the remote machine. You can also pass commands. For example, to reattach to a remote screen session using screen you can do the following: ssh -tt firewall.example.com ssh -tt server2.example.org screen -dR The chain can be arbitrarily long and is not limited to just two hosts. Bearbeiten Port Forwarding via an Intermediate Host Tunneling, also called port forwarding, is when a port on one machine mapped to a connection to a port on another machine. In that way remote services can be accessed as if they were local. Or in the case of reverse port forwarding, vice verse. Forwarding can be done directly from one machine to another or via a machine in the middle. Below we are setting up a tunnel from the localhost to machine2, which is behind a firewall, machine1. The tunnel will be via machine1 which is publicly accessible and also has access to machine2. ssh -L 2222:machine2.example.org:22 machine1.example.org Next connecting to the tunnel will actually connect to the second host, machine2. ssh -p 2222 remoteuser@localhost That's it. It is possible to use all the options in this way, such as -X for X11 forwarding. Here is an example of running rsync between the two hosts using machine1 as an intermediary with the above setup. rsync -av -e \"ssh -p 2222\" /path/to/some/dir/ localhost:/path/to/some/dir/ Links https://en.wikibooks.org/wiki/OpenSSH/Cookbook/Proxies_and_Jump_Hosts "},"ssh/tunneling-port-forwarding.html":{"url":"ssh/tunneling-port-forwarding.html","title":"Tunneling / Port Forwarding (EN)","keywords":"","body":"Tunneling / Port Forwarding (EN) Introduction 1. local: -LSpecifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side. ssh -L sourcePort:forwardToHost:onPortconnectToHost means: connect with ssh toconnectToHost, and forward all connection attempts to the local sourcePortto portonPorton the machine calledforwardToHost, which can be reached from theconnectToHostmachine. ssh -L 123:localhost:456 remotehost your host remotehost ╔══════════╗ ╔══════════╗ ║ ║ ║localhost ║ ║ ║ ║ ║ ║ L:123-------R:456 ║ ╚══════════╝ ╚══════════╝ ssh -L 123:faraway-host:456 remotehost your host remotehost faraway-host ╔══════════╗ ╔══════════╗ ╔══════════╗ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ L:123------------------------------R:456 ║ ╚══════════╝ ╚══════════╝ ╚══════════╝ 2. remote: -RSpecifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side. ssh -R sourcePort:forwardToHost:onPort connectToHost means: connect with ssh toconnectToHost, and forward all connection attempts to the remote sourcePortto port onPorton the machine called forwardToHost, which can be reached from yourlocalmachine. ssh -R 456:localhost:123 remotehost your host remotehost ╔══════════╗ ╔══════════╗ ║localhost ║ ║ ║ ║ ║ ║ ║ ║ R:123-------L:456 ║ ╚══════════╝ ╚══════════╝ ssh -R 456:nearhost:123 remotehost nearhost your host remotehost ╔══════════╗ ╔══════════╗ ╔══════════╗ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ ║ R:123------------------------------L:456 ║ ╚══════════╝ ╚══════════╝ ╚══════════╝ Examples Example for 1 ssh -L 80:localhost:80 SUPERSERVER You specify that a connection made to the local port 80 is to be forwarded to port 80 on SUPERSERVER. That means if someone connects to your computer with a webbrowser, he gets the response of the webserver running on SUPERSERVER. You, on your local machine, have no webserver running. Example for 2 ssh -R 80:localhost:80 tinyserver You specify, that a connection made to the port 80 of tinyserver is to be forwarded to port 80 on your local machine. That means if someone connects to the small and slow server with a webbrowser, he gets the response of the webserver running on your local machine. The tinyserver, which has not enough diskspace for the big website, has no webserver running. But people connecting to tinyserver think so. More examples Other things could be: The powerful machine has five webservers running on five different ports. If a user connects to one of the five tinyservers at port 80 with his webbrowser, the request is redirected to the corresponding webserver running on the powerful machine. That would be ssh -R 80:localhost:30180 tinyserver1 ssh -R 80:localhost:30280 tinyserver2 etc. Or maybe your machine is only the connection between the powerful and the small servers. Then it would be (for one of the tinyservers that play to have their own webservers): ssh -R 80:SUPERSERVER:30180 tinyserver1 ssh -R 80:SUPERSERVER:30280 tinyserver2 etc Links http://unix.stackexchange.com/questions/115897/whats-ssh-port-forwarding-and-whats-the-difference-between-ssh-local-and-remot http://www.rzg.mpg.de/services/network/secure-shell/ssh-tunnelling-port-forwarding https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding https://chamibuddhika.wordpress.com/2012/03/21/ssh-tunnelling-explained/ http://www.mpcdf.mpg.de/services/network/secure-shell/ssh-tunnelling-port-forwarding "},"web-magic.html":{"url":"web-magic.html","title":"Web-Magic","keywords":"","body":"Web-Magic "},"web-magic/java-script.html":{"url":"web-magic/java-script.html","title":"Java-Script","keywords":"","body":"Java Script "},"web-magic/java-script/js-dom.html":{"url":"web-magic/java-script/js-dom.html","title":"JS | DOM","keywords":"","body":"JS | DOM Links https://wiki.selfhtml.org/wiki/JavaScript/DOM "},"random-magic.html":{"url":"random-magic.html","title":"Random-Magic","keywords":"","body":"Tools Gatlin: https://gatling.io/ Performance Testing Navicat: https://www.navicat.com/en/products/navicat-for-oracle DB GUI für Oracle, PostgreSQL & more Mindmap - Xmind (Mac) http://www.xmind.net/de/xmind8-pro/ "},"spells-howtos-faqs/howtos.html":{"url":"spells-howtos-faqs/howtos.html","title":"Potion Recipes (HowTos)","keywords":"","body":"HowTos "},"howtos/howto-gitbook-build-static-page.html":{"url":"howtos/howto-gitbook-build-static-page.html","title":"HOWTO |  Gitbook - build static page","keywords":"","body":"HOWTO | Gitbook - build static page Voraussetzungen ... Build Hierbei wird eine Statische Seite im Unterordner docs erzeugt. cd / # Wechsel ins Verzeichnis gitbook install # installiert Plugins & Co, die in book.json definiert sind gitbook build ./ docs/ # baut die statische Seite nach docs/ "},"spells-howtos-faqs/cheatsheets.html":{"url":"spells-howtos-faqs/cheatsheets.html","title":"Spell Scrolls (Cheatsheets)","keywords":"","body":"Spell Scrolls (Cheatsheets) "},"aem.html":{"url":"aem.html","title":"AEM | Cheatsheet","keywords":"","body":"AEM - Adobe Experience Manager (6.3) Collection of curl commands. User Management Change (Admin-)Password: you'll need jq for this... #!/bin/sh # get USER_PATH from specific user - this different on every System USER_PATH=$(/usr/bin/curl --connect-timeout 10 -s -u admin: -X GET \"http://:/bin/querybuilder.json?path=/home/users&1_property=rep:authorizableId&1_property.value=admin&p.limit=-1\" | jq . | cat | grep path | cut -d'\"' -f4) # change PW /usr/bin/curl --connect-timeout 10 -s -u admin: -Fplain= -Fverify= -Fold= -FPath=\"${USER_PATH}\" http://:/crx/explorer/ui/setpassword.jsp Agents Replication Agents: configures the Replication Agent on the to publish the content to the /usr/bin/curl --connect-timeout 10 -u admin: -FtransportUri=\"http://:/bin/receive?sling:authRequestLogin=1\" \"http://:/etc/replication/agents.author/publish/jcr:content\" Backup ... Package Management ... Links: https://web.archive.org/web/20170719150428/http://www.aemcq5tutorials.com/tutorials/adobe-cq5-aem-curl-commands/ https://gist.github.com/joemaffia/dd55e4c43a24c4948e8d https://scriptcrunch.com/check-application-status-using-ansible/ https://github.com/sebastienveluz/cq-tasks-automation https://de.slideshare.net/AshokkumarTA/aem-dispatcher-tips-tricks https://hashimkhan.in/aem-adobecq5-code-templates/curl-aem-commands/ http://www.jetteroheller.com/changing-the-cq5-aem-admin-password-via-curl/ https://alan-mushi.github.io/asap/2015/08/29/AEM-curl-list.html http://www.6dglobal.com/blog/changing-user-passwords-aem-61-curl-2015-06-03 "},"yaml-cheatsheet.html":{"url":"yaml-cheatsheet.html","title":"YAML | Cheatsheet","keywords":"","body":"YAML | Cheatsheet YAML 1.1: Reference card Collection indicators: '? ' : Key indicator. ': ' : Value indicator. '- ' : Nested series entry indicator. ', ' : Separate in-line branch entries. '[]' : Surround in-line series branch. '{}' : Surround in-line keyed branch. Scalar indicators: '''' : Surround in-line unescaped scalar ('' escaped '). '\"' : Surround in-line escaped scalar (see escape codes below). '|' : Block scalar indicator. '>' : Folded scalar indicator. '-' : Strip chomp modifier ('|-' or '>-'). '+' : Keep chomp modifier ('|+' or '>+'). 1-9 : Explicit indentation modifier ('|1' or '>2'). # Modifiers can be combined ('|2-', '>+1'). Alias indicators: '&' : Anchor property. '*' : Alias indicator. Tag property: # Usually unspecified. none : Unspecified tag (automatically resolved by application). '!' : Non-specific tag (by default, \"!!map\"/\"!!seq\"/\"!!str\"). '!foo' : Primary (by convention, means a local \"!foo\" tag). '!!foo' : Secondary (by convention, means \"tag:yaml.org,2002:foo\"). '!h!foo': Requires \"%TAG !h! \" (and then means \"foo\"). '!': Verbatim tag (always means \"foo\"). Document indicators: '%' : Directive indicator. '---': Document header. '...': Document terminator. Misc indicators: ' #' : Throwaway comment indicator. '`@' : Both reserved for future use. Special keys: '=' : Default \"value\" mapping key. ' Core types: # Default automatic tags. '!!map' : { Hash table, dictionary, mapping } '!!seq' : { List, array, tuple, vector, sequence } '!!str' : Unicode string More types: '!!set' : { cherries, plums, apples } '!!omap': [ one: 1, two: 2 ] Language Independent Scalar types: { ~, null } : Null (no value). [ 1234, 0x4D2, 02333 ] : [ Decimal int, Hexadecimal int, Octal int ] [ 1_230.15, 12.3015e+02 ]: [ Fixed float, Exponential float ] [ .inf, -.Inf, .NAN ] : [ Infinity (float), Negative, Not a number ] { Y, true, Yes, ON } : Boolean true { n, FALSE, No, off } : Boolean false ? !!binary > R0lG...BADS= : >- Base 64 binary value. Escape codes: Numeric : { \"\\x12\": 8-bit, \"\\u1234\": 16-bit, \"\\U00102030\": 32-bit } Protective: { \"\\\\\": '\\', \"\\\"\": '\"', \"\\ \": ' ', \"\\\": TAB } C : { \"\\0\": NUL, \"\\a\": BEL, \"\\b\": BS, \"\\f\": FF, \"\\n\": LF, \"\\r\": CR, \"\\t\": TAB, \"\\v\": VTAB } Additional: { \"\\e\": ESC, \"\\_\": NBSP, \"\\N\": NEL, \"\\L\": LS, \"\\P\": PS } Links https://gist.github.com/jonschlinkert/5170877#file-yaml-cheatsheet-md http://docs.ansible.com/ansible/latest/YAMLSyntax.html "},"GLOSSARY.html":{"url":"GLOSSARY.html","title":"Cyclopedia (Glossary)","keywords":"","body":"Glossar "}}